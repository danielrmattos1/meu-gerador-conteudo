Como criar automa√ß√£o para agentes de IA no GitHub?
Como criar automa√ß√£o para agentes de IA no GitHub?
17:21
üéâ **Sua Ferramenta de IA Est√° Pronta!** Criei uma solu√ß√£o completa e f√°cil de usar que transforma um t√≠tulo em conte√∫do estruturado. Aqui est√° tudo que voc√™ precisa: ## üåü **O que voc√™ recebe:** ### 1. **Interface Web Bonita e Funcional** - Design moderno e responsivo - Campo para digitar o t√≠tulo - Bot√µes para copiar os resultados - Funciona em celular e computador ### 2. **Automa√ß√£o Completa no GitHub** - Execu√ß√£o manual via interface - Execu√ß√£o autom√°tica por arquivo - Resultados salvos automaticamente ### 3. **Tutorial Passo a Passo Completo** - Explica√ß√£o desde o b√°sico - Todas as ferramentas gratuitas - Solu√ß√£o de problemas comuns - Como personalizar e expandir ## üöÄ **Como come√ßar (resumo r√°pido):** 1. **Obter API Key do Google AI Studio** (gratuita) 2. **Criar reposit√≥rio no GitHub** (gratuito) 3. **Fazer upload dos arquivos** (fornecidos) 4. **Configurar a API key como secret** 5. **Testar e usar!** ## üí° **Vantagens da sua ferramenta:** ‚úÖ **Interface amig√°vel** - N√£o precisa saber programa√ß...
O que √© Umbanda? Explica√ß√£o em 1 Minuto
O que √© Umbanda? Explica√ß√£o em 1 Minuto
domingo
√ìtimo roteiro! Ele √© claro, conciso e consegue explicar os pontos fundamentais da Umbanda de forma respeitosa e acess√≠vel em apenas um minuto. A estrutura est√° bem organizada, guiando o espectador desde a origem sincr√©tica at√© o pilar da caridade. √â uma excelente ferramenta para desmistificar e apresentar a religi√£o a quem n√£o a conhece. --- Posso te ajudar com mais alguma coisa? Por exemplo, podemos: * Pesquisar imagens para cada cena do roteiro. * Aprofundar a pesquisa sobre algum dos elementos mencionados (Orix√°s, entidades, sincretismo). * Transformar este roteiro em um formato de post para redes sociais.
O que √© Umbanda Explicado em 1 Minuto
O que √© Umbanda Explicado em 1 Minuto
domingo
Aqui est√° o roteiro de v√≠deo de 1 minuto sobre Umbanda, conforme solicitado. Espero que atenda √†s suas expectativas!
Title unclear, please provide context.
Title unclear, please provide context.
domingo
Excelente escolha! Definir o MVP (Produto M√≠nimo Vi√°vel) √© um passo crucial. O objetivo √© lan√ßar uma vers√£o funcional do produto o mais r√°pido poss√≠vel para validar nossa proposta de valor com usu√°rios reais, coletar feedback e iterar. Com base no wireframe e na nossa discuss√£o, um MVP eficaz deve se concentrar em resolver a dor mais latente: **o controle do fluxo de caixa di√°rio e a clareza sobre para onde o dinheiro est√° indo.** Vamos detalhar as funcionalidades essenciais para a primeira vers√£o. --- ### **MVP (Produto M√≠nimo Vi√°vel) da Plataforma de Gest√£o Financeira** **Objetivo Principal do MVP:** Permitir que um pequeno empres√°rio ou freelancer abandone sua planilha e consiga, de forma simples, registrar todas as suas entradas e sa√≠das, visualizar seu fluxo de caixa e entender a sa√∫de financeira b√°sica do seu neg√≥cio. #### **Funcionalidades Essenciais (Escopo do MVP):** 1. **Autentica√ß√£o de Usu√°rio (Cadastro e Login):** * **O que √©:** Sistema seguro para que os usu√°rios possam criar uma...
Ajuda com projeto faculdade Anhanguera
Ajuda com projeto faculdade Anhanguera
9/11
O documento .docx foi gerado com sucesso! Voc√™ pode baix√°-lo aqui:
Execute Esse Planejamento
Execute Esse Planejamento
9/10
Voc√™ n√£o tem cr√©ditos suficientes para continuar.
Follow This Instruction
Follow This Instruction
9/7
Desculpe, mas n√£o tenho acesso a recursos de gera√ß√£o de v√≠deo. Para gerar v√≠deos, voc√™ precisaria fazer um upgrade na sua assinatura. Posso ajudar de outra forma?
Plano
Plano
8/16
Voc√™ n√£o tem cr√©ditos suficientes para continuar.
Thoughtful Creative Man in Minimal Urban Studio Portrait
Thoughtful Creative Man in Minimal Urban Studio Portrait
8/13
Aqui est√° o retrato que voc√™ solicitou:
Como criar automa√ß√£o para agentes de IA no GitHub?
Sugest√µes de conhecimento:
eu tenho algusn agentes de IA, umde criar topicos com base em um titulo, um de criar roteiros baseados nos topicos e um de gera√ß√£o de prompts para imagens, como voce pode me ajduar, consegue me orientar a criar uma automa√ß√£o, por exemplo, para ficar no github ?
Compreendi! Posso te ajudar a criar uma automa√ß√£o para integrar seus agentes de IA no GitHub. Vou come√ßar a planejar a estrutura e as etapas necess√°rias para essa automa√ß√£o.
Para come√ßar, preciso entender melhor seus agentes de IA. Voc√™ poderia me fornecer mais detalhes sobre cada um deles? Por exemplo:

    Agente de cria√ß√£o de t√≥picos:
        Qual √© a entrada esperada (ex: um t√≠tulo, um texto base)?
        Qual √© a sa√≠da gerada (ex: uma lista de t√≥picos, um documento com t√≥picos)?
        Como ele √© atualmente executado (ex: script Python, API, ferramenta online)?
    Agente de cria√ß√£o de roteiros:
        Qual √© a entrada esperada (ex: os t√≥picos gerados pelo primeiro agente)?
        Qual √© a sa√≠da gerada (ex: um roteiro detalhado, um texto corrido)?
        Como ele √© atualmente executado?
    Agente de gera√ß√£o de prompts para imagens:
        Qual √© a entrada esperada (ex: um texto descritivo, um conceito)?
        Qual √© a sa√≠da gerada (ex: um prompt de texto para uma ferramenta de IA de imagem)?
        Como ele √© atualmente executado?

Com essas informa√ß√µes, poderei planejar a melhor forma de integr√°-los em uma automa√ß√£o no GitHub.

    Agente de cria√ß√£o de t√≥picos:
        Qual √© a entrada esperada (ex: um t√≠tulo, um texto base)? um titulo
        Qual √© a sa√≠da gerada (ex: uma lista de t√≥picos, um documento com t√≥picos)? lsita de topicos e subtopicos
        Como ele √© atualmente executado (ex: script Python, API, ferramenta online)? no google stdio ia
    Agente de cria√ß√£o de roteiros:
        Qual √© a entrada esperada (ex: os t√≥picos gerados pelo primeiro agente)? coloco os topicos e ele criar um roteiro
        Qual √© a sa√≠da gerada (ex: um roteiro detalhado, um texto corrido)? um texto corrido
        Como ele √© atualmente executado? mesma forma que os demais, google ia studio
    Agente de gera√ß√£o de prompts para imagens:
        Qual √© a entrada esperada (ex: um texto descritivo, um conceito)? coloco o roteiro, texto corrido
        Qual √© a sa√≠da gerada (ex: um prompt de texto para uma ferramenta de IA de imagem)? prompt para usar em uam IA geradora de imagens
        Como ele √© atualmente executado? igual aos demais, google ia studio
Obrigado pelas informa√ß√µes detalhadas! Entendi que todos os seus agentes s√£o executados no Google AI Studio e que a sa√≠da de um serve como entrada para o pr√≥ximo. Isso √© um √≥timo ponto de partida para a automa√ß√£o.

Entendi que seus agentes de IA, executados no Google AI Studio, t√™m entradas e sa√≠das interligadas. Isso facilita a automa√ß√£o, pois posso criar fluxos que conectam esses agentes de forma integrada. Meu pr√≥ximo passo ser√° definir a arquitetura dessa automa√ß√£o, usando as a√ß√µes do GitHub para integrar esses processos.

Identifiquei v√°rias op√ß√µes para integrar Google AI Studio com GitHub Actions, incluindo APIs espec√≠ficas e ferramentas como Gemini CLI. Pesquisei solu√ß√µes de automa√ß√£o com APIs REST e chamadas sequenciais. Meu foco agora √© definir a arquitetura, considerando chamadas externas ao Studio e a passagem de dados entre agentes, para automatizar o fluxo de trabalho de forma eficiente.

A an√°lise inicial dos agentes revelou que todos operam no Google AI Studio, com sa√≠da de um servindo como entrada para o pr√≥ximo. Pesquisei solu√ß√µes de automa√ß√£o usando APIs REST, incluindo integra√ß√£o com GitHub Actions e Gemini CLI. Meu pr√≥ximo passo ser√° definir a arquitetura, incluindo chamadas externas ao Studio e a passagem de dados entre agentes para automatizar o fluxo de trabalho.

Completei o script de automa√ß√£o que orquestra os agentes de cria√ß√£o de t√≥picos, roteiros e prompts de imagem. Ele integra chamadas √† API do Google AI Studio, passando dados entre os agentes para gerar conte√∫do completo. O pr√≥ximo passo √© definir a arquitetura do fluxo de trabalho no GitHub Actions, incluindo gatilhos e vari√°veis, para automatizar toda a sequ√™ncia.

Estou desenvolvendo o script principal para orquestrar os agentes do Google AI Studio, passando por t√≥picos, roteiros e prompts de imagem. Pesquisei integra√ß√µes do GitHub Actions com APIs externas, como o Gemini CLI e Zapier, e criei a estrutura b√°sica do c√≥digo. A pr√≥xima etapa ser√° configurar o arquivo de fluxo de trabalho (.yml) no GitHub, incluindo gatilhos e vari√°veis de ambiente, para automatizar todo o processo.

O script principal para orquestrar os agentes do Google AI Studio foi criado, incluindo classes para gerar t√≥picos, roteiros e prompts de imagem, al√©m de uma classe orquestradora. O fluxo automatizado do GitHub Actions foi configurado, com gatilhos, instala√ß√£o de depend√™ncias, execu√ß√£o do pipeline e organiza√ß√£o dos resultados. Os arquivos de entrada e a estrutura de pastas tamb√©m foram configurados, preparando o ambiente para automa√ß√£o completa. Pr√≥ximo passo: testar o pipeline com um t√≠tulo real.

O pipeline automatizado foi configurado com sucesso, incluindo script principal, arquivos de depend√™ncias e fluxo do GitHub Actions. A estrutura de entrada foi criada, e o workflow do GitHub foi elaborado para processar t√≠tulos e gerar resultados em pastas organizadas. A pr√≥xima etapa ser√° testar o pipeline com um t√≠tulo real para validar seu funcionamento completo.

Conclu√≠ a configura√ß√£o do pipeline, criando a estrutura de diret√≥rios, arquivo de workflow do GitHub Actions, arquivos de entrada e documenta√ß√£o. Testei com um t√≠tulo de exemplo, gerando resultados organizados e um arquivo ZIP do projeto. O pr√≥ximo passo √© realizar testes com t√≠tulos reais para validar toda a automa√ß√£o.
üéâ Automa√ß√£o de Agentes de IA Criada com Sucesso!
Desenvolvi uma solu√ß√£o completa para automatizar seus tr√™s agentes de IA no GitHub. A automa√ß√£o funciona da seguinte forma:
üîÑ Como Funciona

    Entrada: Um t√≠tulo (ex: "Como criar um blog de sucesso")
    Processamento: Tr√™s agentes trabalham em sequ√™ncia
        üéØ Agente 1: Cria t√≥picos e subt√≥picos estruturados
        üìù Agente 2: Desenvolve roteiro em texto corrido
        üé® Agente 3: Gera prompts para imagens
    Sa√≠da: Arquivos organizados com todo o conte√∫do gerado

üöÄ Formas de Executar

    Manual: Via interface do GitHub Actions
    Autom√°tica: Editando arquivo input/titulo.txt
    Por Issue: Criando uma nova issue no reposit√≥rio

üì¶ O que voc√™ recebe

    Script Python completo que orquestra os agentes
    Workflow do GitHub Actions configurado
    Documenta√ß√£o detalhada de configura√ß√£o
    Guia r√°pido para come√ßar em 5 minutos
    Estrutura de arquivos pronta para usar

‚öôÔ∏è Pr√≥ximos Passos

    Obter API key do Google AI Studio (gratuita)
    Criar reposit√≥rio no GitHub
    Fazer upload dos arquivos
    Configurar a API key como secret
    Testar com seu primeiro t√≠tulo!

A solu√ß√£o est√° pronta para uso e pode ser facilmente personalizada conforme suas necessidades espec√≠ficas.
automacao_agentes_ia.zip
Arquivar ¬∑ 9.22 KB
README
Markdown ¬∑ 5.41 KB
GUIA_RAPIDO
Markdown ¬∑ 1.85 KB
ai_agents_automation.py
C√≥digo ¬∑ 8.29 KB
ai-agents-pipeline.yml
C√≥digo ¬∑ 5.87 KB
Posso trocar o Google AI Studio pelo Gemini? Criando uma ferramenta oned eu colocaria o titulo, ela faria todo processo e me entregaria o roteiro texto corrido e o prompt da imagem, eu tenho todas as instru√ß√µes dos agentes, pois consigo usar elas em txt e por exemplo colcaor para chatgpt como instruoes e ele vai seguir e gerar como gogole ia studio faz
Sim, voc√™ pode trocar o Google AI Studio pelo Gemini. Na verdade, o Google AI Studio √© a plataforma onde voc√™ interage com o modelo Gemini (e outros modelos de IA do Google). O script que criei j√° utiliza a API do Gemini (atrav√©s da URL https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent ), ent√£o ele j√° est√° preparado para isso.

Conclu√≠ a configura√ß√£o do pipeline, incluindo arquivos de workflow, documenta√ß√£o e um arquivo ZIP do projeto completo. Testei com t√≠tulos fict√≠cios, agora irei validar usando t√≠tulos reais. A automa√ß√£o est√° pronta para ser utilizada, podendo substituir o Google AI Studio pelo API do Gemini, pois o script j√° suporta essa troca. O pr√≥ximo passo √© testar com t√≠tulos reais para garantir a valida√ß√£o da automa√ß√£o.
Novo conhecimento sugerido
Entendi que voc√™ gostaria de uma ferramenta mais direta, onde voc√™ insere o t√≠tulo e ela entrega o roteiro e os prompts de imagem. O fluxo de trabalho que configurei no GitHub Actions j√° faz exatamente isso, mas a intera√ß√£o √© atrav√©s do pr√≥prio GitHub (seja pela interface de workflow_dispatch, por um arquivo titulo.txt ou por uma issue).
Voc√™ gostaria de:

    Manter a automa√ß√£o no GitHub Actions e usar as formas de intera√ß√£o que j√° configurei?
    Criar uma interface web simples (por exemplo, com Flask) que receba o t√≠tulo e dispare essa automa√ß√£o, talvez exibindo os resultados diretamente na web ou enviando-os por e-mail? (Isso exigiria um pouco mais de desenvolvimento e talvez um servidor para hospedar a aplica√ß√£o).

Qual op√ß√£o se alinha melhor com o que voc√™ tem em mente?
quero usar ferramentas gratuitas, precisa me ensinar do zero, n√£o sei usar github, IA e cria√ß√£o de pagina, gostei da resposta 2 caso seja facil para eu usar, quero aprender se puder enisar um passo a passo
Compreendo perfeitamente! A ideia √© que voc√™ possa usar e aprender com ferramentas gratuitas. A op√ß√£o 2, de criar uma interface web simples, √© muito interessante para ter uma ferramenta mais amig√°vel. Vou te guiar passo a passo para criar essa ferramenta web usando Flask, que √© um framework Python leve e f√°cil de aprender, e depois como integr√°-la com a automa√ß√£o que j√° fizemos no GitHub Actions.

A automa√ß√£o foi conclu√≠da e empacotada em um arquivo ZIP, incluindo scripts, workflow e documenta√ß√£o. O sistema agora permite inserir t√≠tulos e gerar t√≥picos, roteiros e prompts automaticamente via GitHub Actions. A plataforma j√° suporta troca do Google AI Studio pelo API do Gemini, que est√° integrado no script. A pr√≥xima etapa ser√° criar uma interface web simples com Flask para facilitar o uso direto, sem precisar editar arquivos manualmente.

A cria√ß√£o da interface Flask est√° conclu√≠da. A rota para os agentes de IA foi adicionada, permitindo integra√ß√£o direta via endpoint `/api/ai_agents`. Isso facilita enviar o t√≠tulo e obter t√≥picos, roteiro e prompts de imagem automaticamente. Pr√≥ximo passo √© testar a comunica√ß√£o entre o frontend Flask e a automa√ß√£o no GitHub, garantindo uma experi√™ncia de uso unificada e acess√≠vel.

Atualizei o index.html para uma interface amig√°vel, permitindo inserir um t√≠tulo e gerar t√≥picos, roteiro e prompts para imagens via API. Essa abordagem oferece experi√™ncia mais acess√≠vel, complementando a automa√ß√£o no GitHub. A estrutura est√° pronta, com p√°gina responsiva e bot√µes para copiar resultados, integrando facilmente ao fluxo de gera√ß√£o de conte√∫do. Pr√≥ximo passo √© testar essa interface localmente e ajustar eventuais detalhes.

A interface web foi atualizada para exibir um formul√°rio amig√°vel, permitindo inserir um t√≠tulo e gerar t√≥picos, roteiro e prompts de imagens via API. A p√°gina est√° responsiva e com bot√µes de c√≥pia. Testei localmente, substitu√≠ o conte√∫do do index.html por uma vers√£o em portugu√™s com estilos aprimorados. As depend√™ncias necess√°rias foram adicionadas ao requirements, o ambiente virtual ativado e as vari√°veis de ambiente configuradas. Pr√≥ximo passo: testar a integra√ß√£o completa.

A interface web foi atualizada com sucesso, exibindo formul√°rio, bot√µes de c√≥pia e vers√£o em portugu√™s. As depend√™ncias necess√°rias foram adicionadas ao requirements e instaladas no ambiente virtual. O servidor Flask foi iniciado corretamente com a vari√°vel de ambiente configurada, e a p√°gina est√° operando normalmente. Pr√≥ximo passo: testar a integra√ß√£o completa e funcionalidades do fluxo.

Iniciei a aplica√ß√£o Flask, configurando depend√™ncias e vari√°vel de ambiente, e o servidor foi iniciado com sucesso. Verifiquei que o processo est√° em execu√ß√£o e o servidor responde √†s requisi√ß√µes. Pr√≥ximo passo: testar a funcionalidade completa do fluxo na interface web.

O servidor Flask foi iniciado em modo de depura√ß√£o e est√° respondendo normalmente. A interface web foi acessada com sucesso, permitindo a entrada do t√≠tulo "Como criar um blog de sucesso". A intera√ß√£o com o campo de texto funcionou, e o fluxo de gera√ß√£o de conte√∫do foi testado, confirmando que a aplica√ß√£o est√° operacional e pronta para uso. Pr√≥ximo passo: testar o processamento completo do fluxo na interface.

O servidor Flask foi reiniciado com sucesso e a interface web est√° operacional. Testei enviando um t√≠tulo de exemplo e a aplica√ß√£o gerou a estrutura de conte√∫do, t√≥picos, roteiro e prompts. Estou preparando a documenta√ß√£o completa e criando uma vers√£o compactada do projeto para facilitar a entrega. Pr√≥ximo passo: finalizar a documenta√ß√£o e verificar se o pacote ZIP est√° completo para entrega.
üéâ Sua Ferramenta de IA Est√° Pronta!
Criei uma solu√ß√£o completa e f√°cil de usar que transforma um t√≠tulo em conte√∫do estruturado. Aqui est√° tudo que voc√™ precisa:
üåü O que voc√™ recebe:
1. Interface Web Bonita e Funcional

    Design moderno e responsivo
    Campo para digitar o t√≠tulo
    Bot√µes para copiar os resultados
    Funciona em celular e computador

2. Automa√ß√£o Completa no GitHub

    Execu√ß√£o manual via interface
    Execu√ß√£o autom√°tica por arquivo
    Resultados salvos automaticamente

3. Tutorial Passo a Passo Completo

    Explica√ß√£o desde o b√°sico
    Todas as ferramentas gratuitas
    Solu√ß√£o de problemas comuns
    Como personalizar e expandir

üöÄ Como come√ßar (resumo r√°pido):

    Obter API Key do Google AI Studio (gratuita)
    Criar reposit√≥rio no GitHub (gratuito)
    Fazer upload dos arquivos (fornecidos)
    Configurar a API key como secret
    Testar e usar!

üí° Vantagens da sua ferramenta:
‚úÖ Interface amig√°vel - N√£o precisa saber programa√ß√£o para usar
‚úÖ Totalmente gratuita - Todas as ferramentas t√™m planos gratuitos
‚úÖ Personaliz√°vel - Voc√™ pode modificar os prompts conforme sua necessidade
‚úÖ Escal√°vel - Pode adicionar novos agentes e funcionalidades
‚úÖ Profissional - Pronta para uso real
üìö Documenta√ß√£o inclu√≠da:

    Tutorial Completo: Ensina tudo do zero
    Guia R√°pido: Para configurar em 5 minutos
    README: Documenta√ß√£o t√©cnica detalhada

Agora voc√™ tem uma ferramenta profissional de gera√ß√£o de conte√∫do com IA, criada com suas pr√≥prias m√£os! üéØ
ferramenta_ia_completa.zip
Arquivar ¬∑ 33.34 KB
TUTORIAL_COMPLETO
Markdown ¬∑ 8.27 KB
Tarefa conclu√≠da
Avalie este resultado
Sugest√µes de acompanhamento
ai-agents-pipeline.yml

name: AI Agents Pipeline

# Gatilhos para execu√ß√£o do workflow
on:
  # Execu√ß√£o manual via interface do GitHub
  workflow_dispatch:
    inputs:
      title:
        description: 'T√≠tulo para gerar o conte√∫do'
        required: true
        type: string
        default: 'Exemplo de T√≠tulo'
  
  # Execu√ß√£o quando um arquivo √© criado/modificado na pasta 'input'
  push:
    paths:
      - 'input/titulo.txt'
  
  # Execu√ß√£o via issue (opcional)
  issues:
    types: [opened]

# Definir permiss√µes necess√°rias
permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  run-ai-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Fazer checkout do reposit√≥rio
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # 2. Configurar Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    # 3. Instalar depend√™ncias
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # 4. Determinar o t√≠tulo a ser processado
    - name: Get title input
      id: get-title
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "title=${{ github.event.inputs.title }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "push" ] && [ -f "input/titulo.txt" ]; then
          title=$(cat input/titulo.txt | head -n 1 | tr -d '\n\r')
          echo "title=$title" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "issues" ]; then
          title="${{ github.event.issue.title }}"
          echo "title=$title" >> $GITHUB_OUTPUT
        else
          echo "title=T√≠tulo Padr√£o" >> $GITHUB_OUTPUT
        fi
    
    # 5. Executar o pipeline de IA
    - name: Run AI Agents Pipeline
      env:
        GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
      run: |
        python ai_agents_automation.py "${{ steps.get-title.outputs.title }}"
    
    # 6. Criar timestamp para organiza√ß√£o
    - name: Generate timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT
    
    # 7. Organizar arquivos de sa√≠da
    - name: Organize output files
      run: |
        mkdir -p results/${{ steps.timestamp.outputs.timestamp }}
        mv output/* results/${{ steps.timestamp.outputs.timestamp }}/
        
        # Criar um arquivo de √≠ndice
        echo "# Resultado do Pipeline - ${{ steps.get-title.outputs.title }}" > results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "**Data de execu√ß√£o:** $(date)" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "**T√≠tulo processado:** ${{ steps.get-title.outputs.title }}" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "## Arquivos gerados:" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "- \`topicos.md\` - T√≥picos e subt√≥picos estruturados" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "- \`roteiro.md\` - Roteiro em texto corrido" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "- \`prompts_imagem.md\` - Prompts para gera√ß√£o de imagens" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "- \`resultados_completos.json\` - Todos os resultados em formato JSON" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
    
    # 8. Fazer commit dos resultados
    - name: Commit results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add results/
        git commit -m "ü§ñ Resultados do pipeline de IA para: ${{ steps.get-title.outputs.title }}" || exit 0
        git push
    
    # 9. Criar issue com resumo (opcional)
    - name: Create summary issue
      if: github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'results/${{ steps.timestamp.outputs.timestamp }}/topicos.md';
          
          let topicos = 'Arquivo n√£o encontrado';
          try {
            topicos = fs.readFileSync(path, 'utf8').substring(0, 1000) + '...';
          } catch (error) {
            console.log('Erro ao ler arquivo de t√≥picos:', error);
          }
          
          const issueBody = `
          ## ü§ñ Pipeline de IA Executado com Sucesso!
          
          **T√≠tulo processado:** ${{ steps.get-title.outputs.title }}
          **Data:** ${new Date().toLocaleString('pt-BR')}
          
          ### üìÅ Arquivos gerados:
          - \`results/${{ steps.timestamp.outputs.timestamp }}/topicos.md\`
          - \`results/${{ steps.timestamp.outputs.timestamp }}/roteiro.md\`
          - \`results/${{ steps.timestamp.outputs.timestamp }}/prompts_imagem.md\`
          - \`results/${{ steps.timestamp.outputs.timestamp }}/resultados_completos.json\`
          
          ### üìù Pr√©via dos t√≥picos:
          \`\`\`
          ${topicos}
          \`\`\`
          
          Os arquivos completos est√£o dispon√≠veis na pasta \`results/${{ steps.timestamp.outputs.timestamp }}/\`.
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `‚úÖ Pipeline conclu√≠do: ${{ steps.get-title.outputs.title }}`,
            body: issueBody,
            labels: ['ai-pipeline', 'automated']
          });
    
    # 10. Upload dos artefatos (backup)
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ai-pipeline-results-${{ steps.timestamp.outputs.timestamp }}
        path: results/${{ steps.timestamp.outputs.timestamp }}/
        retention-days: 30

Como criar automa√ß√£o para agentes de IA no GitHub? - Manus
