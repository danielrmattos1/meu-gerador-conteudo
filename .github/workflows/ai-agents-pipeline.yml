name: AI Agents Pipeline

# Gatilhos para execu√ß√£o do workflow
on:
  # Execu√ß√£o manual via interface do GitHub
  workflow_dispatch:
    inputs:
      title:
        description: 'T√≠tulo para gerar o conte√∫do'
        required: true
        type: string
        default: 'Exemplo de T√≠tulo'
  
  # Execu√ß√£o quando um arquivo √© criado/modificado na pasta 'input'
  push:
    paths:
      - 'input/titulo.txt'
  
  # Execu√ß√£o via issue (opcional)
  issues:
    types: [opened]

# Definir permiss√µes necess√°rias
permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  run-ai-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Fazer checkout do reposit√≥rio
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # 2. Configurar Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    # 3. Instalar depend√™ncias
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # 4. Determinar o t√≠tulo a ser processado
    - name: Get title input
      id: get-title
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "title=${{ github.event.inputs.title }}" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "push" ] && [ -f "input/titulo.txt" ]; then
          title=$(cat input/titulo.txt | head -n 1 | tr -d '\n\r')
          echo "title=$title" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" = "issues" ]; then
          title="${{ github.event.issue.title }}"
          echo "title=$title" >> $GITHUB_OUTPUT
        else
          echo "title=T√≠tulo Padr√£o" >> $GITHUB_OUTPUT
        fi
    
    # 5. Executar o pipeline de IA
    - name: Run AI Agents Pipeline
      env:
        GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY }}
      run: |
        python ai_agents_automation.py "${{ steps.get-title.outputs.title }}"
    
    # 6. Criar timestamp para organiza√ß√£o
    - name: Generate timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT
    
    # 7. Organizar arquivos de sa√≠da
    - name: Organize output files
      run: |
        mkdir -p results/${{ steps.timestamp.outputs.timestamp }}
        mv output/* results/${{ steps.timestamp.outputs.timestamp }}/
        
        # Criar um arquivo de √≠ndice
        echo "# Resultado do Pipeline - ${{ steps.get-title.outputs.title }}" > results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "**Data de execu√ß√£o:** $(date)" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "**T√≠tulo processado:** ${{ steps.get-title.outputs.title }}" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "## Arquivos gerados:" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "- \`topicos.md\` - T√≥picos e subt√≥picos estruturados" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "- \`roteiro.md\` - Roteiro em texto corrido" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "- \`prompts_imagem.md\` - Prompts para gera√ß√£o de imagens" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
        echo "- \`resultados_completos.json\` - Todos os resultados em formato JSON" >> results/${{ steps.timestamp.outputs.timestamp }}/README.md
    
    # 8. Fazer commit dos resultados
    - name: Commit results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add results/
        git commit -m "ü§ñ Resultados do pipeline de IA para: ${{ steps.get-title.outputs.title }}" || exit 0
        git push
    
    # 9. Criar issue com resumo (opcional)
    - name: Create summary issue
      if: github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
     with:
        script: |
          const fs = require('fs');
          const path = 'results/${{ steps.timestamp.outputs.timestamp }}/topicos.md';
          
          let topicos = 'Arquivo n√£o encontrado';
          try {
            topicos = fs.readFileSync(path, 'utf8').substring(0, 1000) + '...';
          } catch (error) {
            console.log('Erro ao ler arquivo de t√≥picos:', error);
          }
          
          const issueBody = `
          ## ü§ñ Pipeline de IA Executado com Sucesso!
          
          **T√≠tulo processado:** ${{ steps.get-title.outputs.title }}
          **Data:** ${new Date().toLocaleString('pt-BR')}
          
          ### üìÅ Arquivos gerados:
          - \`results/${{ steps.timestamp.outputs.timestamp }}/topicos.md\`
          - \`results/${{ steps.timestamp.outputs.timestamp }}/roteiro.md\`
          - \`results/${{ steps.timestamp.outputs.timestamp }}/prompts_imagem.md\`
          - \`results/${{ steps.timestamp.outputs.timestamp }}/resultados_completos.json\`
          
          ### üìù Pr√©via dos t√≥picos:
          \`\`\`
          ${topicos}
          \`\`\`
          
          Os arquivos completos est√£o dispon√≠veis na pasta \`results/${{ steps.timestamp.outputs.timestamp }}/\`.
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `‚úÖ Pipeline conclu√≠do: ${{ steps.get-title.outputs.title }}`,
            body: issueBody,
            labels: ['ai-pipeline', 'automated']
          });
